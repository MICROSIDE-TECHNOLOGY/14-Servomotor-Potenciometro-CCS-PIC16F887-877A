CCS PCM C Compiler, Version 5.115d, 1               14-sep.-23 12:21
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\14-Servomotor-Potenciometro-CCS-PIC16F887-877A\Proyecto\PIC16F877A\Servomotor + Potenciómetro.lst

               ROM used:   1476 words (18%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           80 (22%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   53D
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   051
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... Servomotor + Potenciometro.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Controlar la posición de un servomotor por medio de un potenciometro
.................... utilizando los modulos PWM y ADC
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F877A.h> //Incluye el microcontrolador con el que se va a trabajar
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0031:  MOVF   67,W
0032:  ANDLW  07
0033:  MOVWF  77
0034:  RRF    67,W
0035:  MOVWF  78
0036:  RRF    78,F
0037:  RRF    78,F
0038:  MOVLW  1F
0039:  ANDWF  78,F
003A:  MOVF   78,W
003B:  ADDWF  69,W
003C:  MOVWF  04
003D:  BCF    03.7
003E:  BTFSC  6A.0
003F:  BSF    03.7
0040:  CLRF   78
0041:  INCF   78,F
0042:  INCF   77,F
0043:  GOTO   045
0044:  RLF    78,F
0045:  DECFSZ 77,F
0046:  GOTO   044
0047:  MOVF   68,F
0048:  BTFSC  03.2
0049:  GOTO   04D
004A:  MOVF   78,W
004B:  IORWF  00,F
004C:  GOTO   050
004D:  COMF   78,F
004E:  MOVF   78,W
004F:  ANDWF  00,F
0050:  RETURN
*
00BD:  MOVLW  8E
00BE:  MOVWF  77
00BF:  MOVF   41,W
00C0:  MOVWF  78
00C1:  MOVF   40,W
00C2:  MOVWF  79
00C3:  CLRF   7A
00C4:  MOVF   78,F
00C5:  BTFSS  03.2
00C6:  GOTO   0D1
00C7:  MOVF   79,W
00C8:  MOVWF  78
00C9:  CLRF   79
00CA:  MOVLW  08
00CB:  SUBWF  77,F
00CC:  MOVF   78,F
00CD:  BTFSS  03.2
00CE:  GOTO   0D1
00CF:  CLRF   77
00D0:  GOTO   0D9
00D1:  BCF    03.0
00D2:  BTFSC  78.7
00D3:  GOTO   0D8
00D4:  RLF    79,F
00D5:  RLF    78,F
00D6:  DECF   77,F
00D7:  GOTO   0D1
00D8:  BCF    78.7
00D9:  RETURN
00DA:  MOVLW  80
00DB:  BTFSC  03.1
00DC:  XORWF  5C,F
00DD:  CLRF   61
00DE:  CLRF   62
00DF:  MOVF   58,W
00E0:  MOVWF  60
00E1:  MOVF   5C,W
00E2:  XORWF  60,F
00E3:  MOVF   57,W
00E4:  BTFSC  03.2
00E5:  GOTO   1CA
00E6:  MOVWF  5F
00E7:  MOVWF  77
00E8:  MOVF   5B,W
00E9:  BTFSC  03.2
00EA:  GOTO   1D3
00EB:  SUBWF  5F,F
00EC:  BTFSC  03.2
00ED:  GOTO   16F
00EE:  BTFSS  03.0
00EF:  GOTO   12D
00F0:  MOVF   5C,W
00F1:  MOVWF  65
00F2:  BSF    65.7
00F3:  MOVF   5D,W
00F4:  MOVWF  64
00F5:  MOVF   5E,W
00F6:  MOVWF  63
00F7:  CLRF   62
00F8:  BCF    03.0
00F9:  RRF    65,F
00FA:  RRF    64,F
00FB:  RRF    63,F
00FC:  RRF    62,F
00FD:  DECFSZ 5F,F
00FE:  GOTO   0F7
00FF:  BTFSS  60.7
0100:  GOTO   104
0101:  BSF    61.0
0102:  GOTO   1E7
0103:  BCF    61.0
0104:  BCF    5F.0
0105:  BSF    61.4
0106:  MOVLW  5A
0107:  MOVWF  04
0108:  BCF    03.7
0109:  GOTO   1FC
010A:  BCF    61.4
010B:  BTFSC  60.7
010C:  GOTO   117
010D:  BTFSS  5F.0
010E:  GOTO   122
010F:  RRF    65,F
0110:  RRF    64,F
0111:  RRF    63,F
0112:  RRF    62,F
0113:  INCF   77,F
0114:  BTFSC  03.2
0115:  GOTO   1E2
0116:  GOTO   122
0117:  BTFSC  65.7
0118:  GOTO   125
0119:  BCF    03.0
011A:  RLF    62,F
011B:  RLF    63,F
011C:  RLF    64,F
011D:  RLF    65,F
011E:  DECF   77,F
011F:  BTFSC  03.2
0120:  GOTO   1E2
0121:  GOTO   117
0122:  BSF    61.6
0123:  GOTO   18F
0124:  BCF    61.6
0125:  MOVF   58,W
0126:  MOVWF  60
0127:  BTFSS  60.7
0128:  GOTO   12B
0129:  BSF    65.7
012A:  GOTO   1DB
012B:  BCF    65.7
012C:  GOTO   1DB
012D:  MOVF   5B,W
012E:  MOVWF  5F
012F:  MOVWF  77
0130:  MOVF   57,W
0131:  SUBWF  5F,F
0132:  MOVF   58,W
0133:  MOVWF  65
0134:  BSF    65.7
0135:  MOVF   59,W
0136:  MOVWF  64
0137:  MOVF   5A,W
0138:  MOVWF  63
0139:  CLRF   62
013A:  BCF    03.0
013B:  RRF    65,F
013C:  RRF    64,F
013D:  RRF    63,F
013E:  RRF    62,F
013F:  DECFSZ 5F,F
0140:  GOTO   139
0141:  BTFSS  60.7
0142:  GOTO   146
0143:  BSF    61.1
0144:  GOTO   1E7
0145:  BCF    61.1
0146:  BCF    5F.0
0147:  BSF    61.5
0148:  MOVLW  5E
0149:  MOVWF  04
014A:  BCF    03.7
014B:  GOTO   1FC
014C:  BCF    61.5
014D:  BTFSC  60.7
014E:  GOTO   159
014F:  BTFSS  5F.0
0150:  GOTO   164
0151:  RRF    65,F
0152:  RRF    64,F
0153:  RRF    63,F
0154:  RRF    62,F
0155:  INCF   77,F
0156:  BTFSC  03.2
0157:  GOTO   1E2
0158:  GOTO   164
0159:  BTFSC  65.7
015A:  GOTO   167
015B:  BCF    03.0
015C:  RLF    62,F
015D:  RLF    63,F
015E:  RLF    64,F
015F:  RLF    65,F
0160:  DECF   77,F
0161:  BTFSC  03.2
0162:  GOTO   1E2
0163:  GOTO   159
0164:  BSF    61.7
0165:  GOTO   18F
0166:  BCF    61.7
0167:  MOVF   5C,W
0168:  MOVWF  60
0169:  BTFSS  60.7
016A:  GOTO   16D
016B:  BSF    65.7
016C:  GOTO   1DB
016D:  BCF    65.7
016E:  GOTO   1DB
016F:  MOVF   5C,W
0170:  MOVWF  65
0171:  BSF    65.7
0172:  MOVF   5D,W
0173:  MOVWF  64
0174:  MOVF   5E,W
0175:  MOVWF  63
0176:  BTFSS  60.7
0177:  GOTO   17C
0178:  BCF    65.7
0179:  BSF    61.2
017A:  GOTO   1E7
017B:  BCF    61.2
017C:  CLRF   62
017D:  BCF    5F.0
017E:  MOVLW  5A
017F:  MOVWF  04
0180:  BCF    03.7
0181:  GOTO   1FC
0182:  BTFSC  60.7
0183:  GOTO   1A5
0184:  MOVF   58,W
0185:  MOVWF  60
0186:  BTFSS  5F.0
0187:  GOTO   18F
0188:  RRF    65,F
0189:  RRF    64,F
018A:  RRF    63,F
018B:  RRF    62,F
018C:  INCF   77,F
018D:  BTFSC  03.2
018E:  GOTO   1E2
018F:  BTFSS  62.7
0190:  GOTO   1A0
0191:  INCF   63,F
0192:  BTFSS  03.2
0193:  GOTO   1A0
0194:  INCF   64,F
0195:  BTFSS  03.2
0196:  GOTO   1A0
0197:  INCF   65,F
0198:  BTFSS  03.2
0199:  GOTO   1A0
019A:  RRF    65,F
019B:  RRF    64,F
019C:  RRF    63,F
019D:  INCF   77,F
019E:  BTFSC  03.2
019F:  GOTO   1E2
01A0:  BTFSC  61.6
01A1:  GOTO   124
01A2:  BTFSC  61.7
01A3:  GOTO   166
01A4:  GOTO   1C4
01A5:  MOVLW  80
01A6:  XORWF  65,F
01A7:  BTFSS  65.7
01A8:  GOTO   1AD
01A9:  GOTO   1E7
01AA:  MOVF   5C,W
01AB:  MOVWF  60
01AC:  GOTO   1BA
01AD:  MOVF   58,W
01AE:  MOVWF  60
01AF:  MOVF   65,F
01B0:  BTFSS  03.2
01B1:  GOTO   1BA
01B2:  MOVF   64,F
01B3:  BTFSS  03.2
01B4:  GOTO   1BA
01B5:  MOVF   63,F
01B6:  BTFSS  03.2
01B7:  GOTO   1BA
01B8:  CLRF   77
01B9:  GOTO   1DB
01BA:  BTFSC  65.7
01BB:  GOTO   1C4
01BC:  BCF    03.0
01BD:  RLF    62,F
01BE:  RLF    63,F
01BF:  RLF    64,F
01C0:  RLF    65,F
01C1:  DECFSZ 77,F
01C2:  GOTO   1BA
01C3:  GOTO   1E2
01C4:  BTFSS  60.7
01C5:  GOTO   1C8
01C6:  BSF    65.7
01C7:  GOTO   1DB
01C8:  BCF    65.7
01C9:  GOTO   1DB
01CA:  MOVF   5B,W
01CB:  MOVWF  77
01CC:  MOVF   5C,W
01CD:  MOVWF  65
01CE:  MOVF   5D,W
01CF:  MOVWF  64
01D0:  MOVF   5E,W
01D1:  MOVWF  63
01D2:  GOTO   1DB
01D3:  MOVF   57,W
01D4:  MOVWF  77
01D5:  MOVF   58,W
01D6:  MOVWF  65
01D7:  MOVF   59,W
01D8:  MOVWF  64
01D9:  MOVF   5A,W
01DA:  MOVWF  63
01DB:  MOVF   65,W
01DC:  MOVWF  78
01DD:  MOVF   64,W
01DE:  MOVWF  79
01DF:  MOVF   63,W
01E0:  MOVWF  7A
01E1:  GOTO   21A
01E2:  CLRF   77
01E3:  CLRF   78
01E4:  CLRF   79
01E5:  CLRF   7A
01E6:  GOTO   21A
01E7:  CLRF   62
01E8:  COMF   63,F
01E9:  COMF   64,F
01EA:  COMF   65,F
01EB:  COMF   62,F
01EC:  INCF   62,F
01ED:  BTFSS  03.2
01EE:  GOTO   1F5
01EF:  INCF   63,F
01F0:  BTFSS  03.2
01F1:  GOTO   1F5
01F2:  INCF   64,F
01F3:  BTFSC  03.2
01F4:  INCF   65,F
01F5:  BTFSC  61.0
01F6:  GOTO   103
01F7:  BTFSC  61.1
01F8:  GOTO   145
01F9:  BTFSC  61.2
01FA:  GOTO   17B
01FB:  GOTO   1AA
01FC:  MOVF   00,W
01FD:  ADDWF  63,F
01FE:  BTFSS  03.0
01FF:  GOTO   206
0200:  INCF   64,F
0201:  BTFSS  03.2
0202:  GOTO   206
0203:  INCF   65,F
0204:  BTFSC  03.2
0205:  BSF    5F.0
0206:  DECF   04,F
0207:  MOVF   00,W
0208:  ADDWF  64,F
0209:  BTFSS  03.0
020A:  GOTO   20E
020B:  INCF   65,F
020C:  BTFSC  03.2
020D:  BSF    5F.0
020E:  DECF   04,F
020F:  MOVF   00,W
0210:  BTFSS  00.7
0211:  XORLW  80
0212:  ADDWF  65,F
0213:  BTFSC  03.0
0214:  BSF    5F.0
0215:  BTFSC  61.4
0216:  GOTO   10A
0217:  BTFSC  61.5
0218:  GOTO   14C
0219:  GOTO   182
021A:  RETURN
021B:  MOVF   57,W
021C:  BTFSC  03.2
021D:  GOTO   28B
021E:  MOVWF  5F
021F:  MOVF   5B,W
0220:  BTFSC  03.2
0221:  GOTO   28B
0222:  ADDWF  5F,F
0223:  BTFSC  03.0
0224:  GOTO   22C
0225:  MOVLW  7F
0226:  SUBWF  5F,F
0227:  BTFSS  03.0
0228:  GOTO   28B
0229:  BTFSC  03.2
022A:  GOTO   28B
022B:  GOTO   230
022C:  MOVLW  81
022D:  ADDWF  5F,F
022E:  BTFSC  03.0
022F:  GOTO   28B
0230:  MOVF   5F,W
0231:  MOVWF  77
0232:  CLRF   78
0233:  CLRF   79
0234:  CLRF   7A
0235:  MOVF   58,W
0236:  MOVWF  63
0237:  BSF    63.7
0238:  MOVF   59,W
0239:  MOVWF  62
023A:  MOVF   5A,W
023B:  MOVWF  61
023C:  MOVLW  18
023D:  MOVWF  5F
023E:  CLRF   60
023F:  BTFSS  61.0
0240:  GOTO   259
0241:  MOVF   5E,W
0242:  ADDWF  7A,F
0243:  BTFSS  03.0
0244:  GOTO   24B
0245:  INCF   79,F
0246:  BTFSS  03.2
0247:  GOTO   24B
0248:  INCF   78,F
0249:  BTFSC  03.2
024A:  BSF    60.7
024B:  MOVF   5D,W
024C:  ADDWF  79,F
024D:  BTFSS  03.0
024E:  GOTO   252
024F:  INCF   78,F
0250:  BTFSC  03.2
0251:  BSF    60.7
0252:  MOVF   5C,W
0253:  MOVWF  59
0254:  BSF    59.7
0255:  MOVF   59,W
0256:  ADDWF  78,F
0257:  BTFSC  03.0
0258:  BSF    60.7
0259:  RLF    60,F
025A:  RRF    78,F
025B:  RRF    79,F
025C:  RRF    7A,F
025D:  RRF    63,F
025E:  RRF    62,F
025F:  RRF    61,F
0260:  BCF    03.0
0261:  DECFSZ 5F,F
0262:  GOTO   23E
0263:  MOVLW  01
0264:  ADDWF  77,F
0265:  BTFSC  03.0
0266:  GOTO   28B
0267:  BTFSC  78.7
0268:  GOTO   270
0269:  RLF    63,F
026A:  RLF    7A,F
026B:  RLF    79,F
026C:  RLF    78,F
026D:  DECF   77,F
026E:  BTFSC  03.2
026F:  GOTO   28B
0270:  BTFSS  63.7
0271:  GOTO   281
0272:  INCF   7A,F
0273:  BTFSS  03.2
0274:  GOTO   281
0275:  INCF   79,F
0276:  BTFSS  03.2
0277:  GOTO   281
0278:  INCF   78,F
0279:  BTFSS  03.2
027A:  GOTO   281
027B:  RRF    78,F
027C:  RRF    79,F
027D:  RRF    7A,F
027E:  INCF   77,F
027F:  BTFSC  03.2
0280:  GOTO   28B
0281:  MOVF   58,W
0282:  MOVWF  60
0283:  MOVF   5C,W
0284:  XORWF  60,F
0285:  BTFSS  60.7
0286:  GOTO   289
0287:  BSF    78.7
0288:  GOTO   28F
0289:  BCF    78.7
028A:  GOTO   28F
028B:  CLRF   77
028C:  CLRF   78
028D:  CLRF   79
028E:  CLRF   7A
028F:  RETURN
0290:  MOVF   57,W
0291:  BTFSC  03.2
0292:  GOTO   355
0293:  MOVWF  63
0294:  MOVF   5B,W
0295:  BTFSC  03.2
0296:  GOTO   355
0297:  SUBWF  63,F
0298:  BTFSS  03.0
0299:  GOTO   29F
029A:  MOVLW  7F
029B:  ADDWF  63,F
029C:  BTFSC  03.0
029D:  GOTO   355
029E:  GOTO   2A5
029F:  MOVLW  81
02A0:  SUBWF  63,F
02A1:  BTFSS  03.0
02A2:  GOTO   355
02A3:  BTFSC  03.2
02A4:  GOTO   355
02A5:  MOVF   63,W
02A6:  MOVWF  77
02A7:  CLRF   78
02A8:  CLRF   79
02A9:  CLRF   7A
02AA:  CLRF   62
02AB:  MOVF   58,W
02AC:  MOVWF  61
02AD:  BSF    61.7
02AE:  MOVF   59,W
02AF:  MOVWF  60
02B0:  MOVF   5A,W
02B1:  MOVWF  5F
02B2:  MOVLW  19
02B3:  MOVWF  63
02B4:  MOVF   5E,W
02B5:  SUBWF  5F,F
02B6:  BTFSC  03.0
02B7:  GOTO   2C8
02B8:  MOVLW  01
02B9:  SUBWF  60,F
02BA:  BTFSC  03.0
02BB:  GOTO   2C8
02BC:  SUBWF  61,F
02BD:  BTFSC  03.0
02BE:  GOTO   2C8
02BF:  SUBWF  62,F
02C0:  BTFSC  03.0
02C1:  GOTO   2C8
02C2:  INCF   62,F
02C3:  INCF   61,F
02C4:  INCF   60,F
02C5:  MOVF   5E,W
02C6:  ADDWF  5F,F
02C7:  GOTO   2FA
02C8:  MOVF   5D,W
02C9:  SUBWF  60,F
02CA:  BTFSC  03.0
02CB:  GOTO   2E3
02CC:  MOVLW  01
02CD:  SUBWF  61,F
02CE:  BTFSC  03.0
02CF:  GOTO   2E3
02D0:  SUBWF  62,F
02D1:  BTFSC  03.0
02D2:  GOTO   2E3
02D3:  INCF   62,F
02D4:  INCF   61,F
02D5:  MOVF   5D,W
02D6:  ADDWF  60,F
02D7:  MOVF   5E,W
02D8:  ADDWF  5F,F
02D9:  BTFSS  03.0
02DA:  GOTO   2FA
02DB:  INCF   60,F
02DC:  BTFSS  03.2
02DD:  GOTO   2FA
02DE:  INCF   61,F
02DF:  BTFSS  03.2
02E0:  GOTO   2FA
02E1:  INCF   62,F
02E2:  GOTO   2FA
02E3:  MOVF   5C,W
02E4:  IORLW  80
02E5:  SUBWF  61,F
02E6:  BTFSC  03.0
02E7:  GOTO   2F9
02E8:  MOVLW  01
02E9:  SUBWF  62,F
02EA:  BTFSC  03.0
02EB:  GOTO   2F9
02EC:  INCF   62,F
02ED:  MOVF   5C,W
02EE:  IORLW  80
02EF:  ADDWF  61,F
02F0:  MOVF   5D,W
02F1:  ADDWF  60,F
02F2:  BTFSS  03.0
02F3:  GOTO   2D7
02F4:  INCF   61,F
02F5:  BTFSS  03.2
02F6:  GOTO   2D7
02F7:  INCF   62,F
02F8:  GOTO   2D7
02F9:  BSF    7A.0
02FA:  DECFSZ 63,F
02FB:  GOTO   2FD
02FC:  GOTO   308
02FD:  BCF    03.0
02FE:  RLF    5F,F
02FF:  RLF    60,F
0300:  RLF    61,F
0301:  RLF    62,F
0302:  BCF    03.0
0303:  RLF    7A,F
0304:  RLF    79,F
0305:  RLF    78,F
0306:  RLF    64,F
0307:  GOTO   2B4
0308:  BTFSS  64.0
0309:  GOTO   310
030A:  BCF    03.0
030B:  RRF    78,F
030C:  RRF    79,F
030D:  RRF    7A,F
030E:  RRF    64,F
030F:  GOTO   313
0310:  DECF   77,F
0311:  BTFSC  03.2
0312:  GOTO   355
0313:  BTFSC  64.7
0314:  GOTO   33C
0315:  BCF    03.0
0316:  RLF    5F,F
0317:  RLF    60,F
0318:  RLF    61,F
0319:  RLF    62,F
031A:  MOVF   5E,W
031B:  SUBWF  5F,F
031C:  BTFSC  03.0
031D:  GOTO   328
031E:  MOVLW  01
031F:  SUBWF  60,F
0320:  BTFSC  03.0
0321:  GOTO   328
0322:  SUBWF  61,F
0323:  BTFSC  03.0
0324:  GOTO   328
0325:  SUBWF  62,F
0326:  BTFSS  03.0
0327:  GOTO   34B
0328:  MOVF   5D,W
0329:  SUBWF  60,F
032A:  BTFSC  03.0
032B:  GOTO   333
032C:  MOVLW  01
032D:  SUBWF  61,F
032E:  BTFSC  03.0
032F:  GOTO   333
0330:  SUBWF  62,F
0331:  BTFSS  03.0
0332:  GOTO   34B
0333:  MOVF   5C,W
0334:  IORLW  80
0335:  SUBWF  61,F
0336:  BTFSC  03.0
0337:  GOTO   33C
0338:  MOVLW  01
0339:  SUBWF  62,F
033A:  BTFSS  03.0
033B:  GOTO   34B
033C:  INCF   7A,F
033D:  BTFSS  03.2
033E:  GOTO   34B
033F:  INCF   79,F
0340:  BTFSS  03.2
0341:  GOTO   34B
0342:  INCF   78,F
0343:  BTFSS  03.2
0344:  GOTO   34B
0345:  INCF   77,F
0346:  BTFSC  03.2
0347:  GOTO   355
0348:  RRF    78,F
0349:  RRF    79,F
034A:  RRF    7A,F
034B:  MOVF   58,W
034C:  MOVWF  63
034D:  MOVF   5C,W
034E:  XORWF  63,F
034F:  BTFSS  63.7
0350:  GOTO   353
0351:  BSF    78.7
0352:  GOTO   359
0353:  BCF    78.7
0354:  GOTO   359
0355:  CLRF   77
0356:  CLRF   78
0357:  CLRF   79
0358:  CLRF   7A
0359:  RETURN
*
03DF:  MOVLW  8E
03E0:  MOVWF  77
03E1:  MOVF   48,W
03E2:  SUBWF  77,F
03E3:  MOVF   49,W
03E4:  MOVWF  79
03E5:  MOVF   4A,W
03E6:  MOVWF  78
03E7:  BSF    79.7
03E8:  MOVF   77,F
03E9:  BTFSC  03.2
03EA:  GOTO   3F6
03EB:  BCF    03.0
03EC:  MOVF   79,F
03ED:  BTFSS  03.2
03EE:  GOTO   3F2
03EF:  MOVF   78,F
03F0:  BTFSC  03.2
03F1:  GOTO   3F6
03F2:  RRF    79,F
03F3:  RRF    78,F
03F4:  DECFSZ 77,F
03F5:  GOTO   3EB
03F6:  BTFSS  49.7
03F7:  GOTO   3FD
03F8:  COMF   78,F
03F9:  COMF   79,F
03FA:  INCF   78,F
03FB:  BTFSC  03.2
03FC:  INCF   79,F
03FD:  RETURN
03FE:  MOVF   49,W
03FF:  MOVWF  50
0400:  MOVF   4D,W
0401:  XORWF  50,F
0402:  BTFSS  50.7
0403:  GOTO   409
0404:  BCF    03.2
0405:  BCF    03.0
0406:  BTFSC  49.7
0407:  BSF    03.0
0408:  GOTO   43C
0409:  MOVF   49,W
040A:  MOVWF  50
040B:  MOVF   4C,W
040C:  MOVWF  51
040D:  MOVF   48,W
040E:  SUBWF  51,F
040F:  BTFSC  03.2
0410:  GOTO   417
0411:  BTFSS  50.7
0412:  GOTO   43C
0413:  MOVF   03,W
0414:  XORLW  01
0415:  MOVWF  03
0416:  GOTO   43C
0417:  MOVF   4D,W
0418:  MOVWF  51
0419:  MOVF   49,W
041A:  SUBWF  51,F
041B:  BTFSC  03.2
041C:  GOTO   423
041D:  BTFSS  50.7
041E:  GOTO   43C
041F:  MOVF   03,W
0420:  XORLW  01
0421:  MOVWF  03
0422:  GOTO   43C
0423:  MOVF   4E,W
0424:  MOVWF  51
0425:  MOVF   4A,W
0426:  SUBWF  51,F
0427:  BTFSC  03.2
0428:  GOTO   42F
0429:  BTFSS  50.7
042A:  GOTO   43C
042B:  MOVF   03,W
042C:  XORLW  01
042D:  MOVWF  03
042E:  GOTO   43C
042F:  MOVF   4F,W
0430:  MOVWF  51
0431:  MOVF   4B,W
0432:  SUBWF  51,F
0433:  BTFSC  03.2
0434:  GOTO   43B
0435:  BTFSS  50.7
0436:  GOTO   43C
0437:  MOVF   03,W
0438:  XORLW  01
0439:  MOVWF  03
043A:  GOTO   43C
043B:  BCF    03.0
043C:  RETURN
.................... 
.................... #list
.................... 
.................... #DEVICE ADC = 10     // Configura el ADC para usar resolución de 10 bits (1024)
.................... #include "Servo.h"
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... Servo.c
.................... Product Revision  :  1
.................... Driver Version    :  0.9beta1
.................... 
.................... Disclaimer:
.................... ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.................... ** OF MERCHANTABILITY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
.................... ** TO THE WARRANTIES FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.................... ** IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM,
.................... ** DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
.................... ** OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
.................... ** OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.................... ************************************************************************************************/
.................... 
.................... /*!
....................  * @file  Servo.h
....................  * @brief Small Servo library using Timer1 interruption technique.
....................           For testing purposes only DO NOT USE on producion.
....................  */
....................  
.................... // TODO: This library throws a warning for a possible race condition, fix by 
.................... //       initial release
.................... 
.................... #ifndef _SERVO_H_
.................... #define _SERVO_H_
.................... 
.................... // -------------------------------------------------------------- PUBLIC MACROS
.................... 
.................... // If needed to be used with a different FOSC, define this value to the
.................... // appropiate frequency in Hertz.
.................... #ifndef SERVO_FOSC
.................... #define SERVO_FOSC 20000000
.................... #endif
.................... 
.................... // Hobby servos work by measuring the duty cycle from 1ms to 2ms, then adjusting
.................... // the position proportionately from 0 to 180, however most of them have different
.................... // offsets, calibrate the following values to match your servo position 
.................... 
.................... // Seconds that generate a 0° turn
.................... #ifndef SERVO_MIN_POS
.................... #define SERVO_MIN_POS 0.0004
.................... #endif
.................... 
.................... // Seconds that generate a 180° turn
.................... #ifndef SERVO_MAX_POS
.................... #define SERVO_MAX_POS 0.0027
.................... #endif
.................... 
.................... // Interval between 0° and 180° turn in seconds
.................... #define SERVO_DUTY_CYCLE_POS (SERVO_MAX_POS - SERVO_MIN_POS)
.................... 
.................... // Time needed to complement a 50Hz
.................... #define SERVO_FREQ_COMPLEMENT 0.02 - SERVO_MAX_POS
.................... 
.................... // Timer1 preescaler used, bigger values reduce control accuracy, values too
.................... // small might result in errors.
.................... #ifndef SERVO_T_PREESCALER
.................... #define SERVO_T_PREESCALER 2
.................... #endif
.................... 
.................... // Values for Timer1 interruption 
.................... #define SERVO_MIN_POS_T1_VALUE (unsigned int16)(65535 - ( (SERVO_FOSC * SERVO_MIN_POS)/(4 * SERVO_T_PREESCALER) ))
.................... 
.................... #define SERVO_FREQ_COMPLEMENT_VALUE (unsigned int16)(65535 - ( (SERVO_FOSC * SERVO_FREQ_COMPLEMENT)/(4 * SERVO_T_PREESCALER) ))
.................... 
.................... #define SERVO_MAX_COMPLEMENT (unsigned int16)(65535 - ( ( SERVO_FOSC * ( SERVO_DUTY_CYCLE_POS ) ) / (4 * SERVO_T_PREESCALER) ) )
.................... 
.................... // ------------------------------------------------------------------ VARIABLES
.................... 
.................... // Counter used to keep track of the pin level and the preloaded value for Timer1
.................... unsigned int8 __servo_array_pointer = 0;
.................... 
.................... // Signal generation array and pin status
.................... // TODO: implement multiple server control, it should be doable to control up to 16 servos
.................... // using only Timer1, rewriting this section might also reduce memory consumtion
.................... unsigned int16 __servoSignal[4] = { SERVO_MIN_POS_T1_VALUE, 65535, SERVO_MAX_COMPLEMENT, SERVO_FREQ_COMPLEMENT_VALUE };
*
054D:  MOVLW  17
054E:  BCF    03.5
054F:  MOVWF  29
0550:  MOVLW  FC
0551:  MOVWF  2A
0552:  MOVLW  FF
0553:  MOVWF  2B
0554:  MOVWF  2C
0555:  MOVLW  89
0556:  MOVWF  2D
0557:  MOVLW  E9
0558:  MOVWF  2E
0559:  MOVLW  AF
055A:  MOVWF  2F
055B:  MOVLW  3C
055C:  MOVWF  30
.................... unsigned int8  __onOffMap[4] = {1,1,0,0};
055D:  MOVLW  01
055E:  MOVWF  31
055F:  MOVWF  32
0560:  CLRF   33
0561:  CLRF   34
.................... 
.................... // Output pin
.................... int16 __servo_pin = -1;
.................... 
.................... // ----------------------------------------------- PUBLIC FUNCTION DECLARATIONS
.................... 
.................... /**
....................  * @brief Interrupt handler.
....................  * 
....................  * @description This function preload Timer1 next value and changes the output
....................  *              pin
....................  */
.................... #int_timer1
.................... void TIMER1_isr() {
....................    __servo_array_pointer++;
*
0051:  INCF   28,F
....................    if(__servo_array_pointer > 3) __servo_array_pointer = 0;
0052:  MOVF   28,W
0053:  SUBLW  03
0054:  BTFSS  03.0
0055:  CLRF   28
....................    setup_timer_1 ( T1_DISABLED );
0056:  CLRF   10
....................    set_timer1( __servoSignal[__servo_array_pointer] );
0057:  BCF    03.0
0058:  RLF    28,W
0059:  ADDLW  29
005A:  MOVWF  04
005B:  BCF    03.7
005C:  INCF   04,F
005D:  MOVF   00,W
005E:  MOVWF  68
005F:  DECF   04,F
0060:  MOVF   00,W
0061:  MOVWF  67
0062:  CLRF   0E
0063:  MOVF   68,W
0064:  MOVWF  0F
0065:  MOVF   67,W
0066:  MOVWF  0E
0067:  NOP
....................    if ( __onOffMap[__servo_array_pointer] == 1 )
0068:  MOVLW  31
0069:  ADDWF  28,W
006A:  MOVWF  04
006B:  BCF    03.7
006C:  DECFSZ 00,W
006D:  GOTO   07D
....................       output_high(__servo_pin);
006E:  MOVF   35,W
006F:  MOVWF  67
0070:  MOVLW  01
0071:  MOVWF  68
0072:  CLRF   6A
0073:  CLRF   69
0074:  CALL   031
0075:  MOVF   35,W
0076:  MOVWF  67
0077:  CLRF   68
0078:  CLRF   6A
0079:  MOVLW  80
007A:  MOVWF  69
007B:  CALL   031
007C:  GOTO   08A
....................     else
....................       output_low(__servo_pin);
007D:  MOVF   35,W
007E:  MOVWF  67
007F:  CLRF   68
0080:  CLRF   6A
0081:  CLRF   69
0082:  CALL   031
0083:  MOVF   35,W
0084:  MOVWF  67
0085:  CLRF   68
0086:  CLRF   6A
0087:  MOVLW  80
0088:  MOVWF  69
0089:  CALL   031
....................     setup_timer_1 ( T1_INTERNAL | T1_DIV_BY_2 );
008A:  MOVLW  95
008B:  MOVWF  10
008C:  BCF    0C.0
008D:  BCF    0A.3
008E:  BCF    0A.4
008F:  GOTO   01D
.................... }
.................... 
.................... /**
....................  * @brief Servo signal setup.
....................  * 
....................  * @param Output pin
....................  *
....................  * @description This function sets Timer1, Global interruptions and the output
....................  *              pin
....................  */
.................... void setup_servo( int16 output_pin ) {
....................    __servo_array_pointer = 0;
0090:  CLRF   28
....................    
....................    set_timer1( 0 );
0091:  CLRF   0E
0092:  CLRF   0F
0093:  CLRF   0E
0094:  NOP
....................    
....................    enable_interrupts( INT_TIMER1 );
0095:  BSF    03.5
0096:  BSF    0C.0
....................    enable_interrupts( GLOBAL );
0097:  MOVLW  C0
0098:  BCF    03.5
0099:  IORWF  0B,F
....................    
....................    __servo_pin = output_pin;
009A:  MOVF   3C,W
009B:  MOVWF  36
009C:  MOVF   3B,W
009D:  MOVWF  35
009E:  CLRF   27
009F:  BTFSC  0B.7
00A0:  BSF    27.7
00A1:  BCF    0B.7
....................    
....................    output_HIGH (__servo_pin);
00A2:  MOVF   35,W
00A3:  MOVWF  67
00A4:  MOVLW  01
00A5:  MOVWF  68
00A6:  CLRF   6A
00A7:  CLRF   69
00A8:  CALL   031
00A9:  BTFSC  27.7
00AA:  BSF    0B.7
00AB:  CLRF   27
00AC:  BTFSC  0B.7
00AD:  BSF    27.7
00AE:  BCF    0B.7
00AF:  MOVF   35,W
00B0:  MOVWF  67
00B1:  CLRF   68
00B2:  CLRF   6A
00B3:  MOVLW  80
00B4:  MOVWF  69
00B5:  CALL   031
00B6:  BTFSC  27.7
00B7:  BSF    0B.7
....................    
....................    setup_timer_1 ( T1_INTERNAL | T1_DIV_BY_2 );
00B8:  MOVLW  95
00B9:  MOVWF  10
00BA:  BCF    0A.3
00BB:  BCF    0A.4
00BC:  GOTO   56B (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Sets control signal in seconds.
....................  * 
....................  * @param Seconds
....................  *
....................  * @description This function calculates Timer1 overflow value for the given
....................  *              seconds, then loads this value on Timer1 overflow registers
....................  */
.................... void set_servo_ms( float seconds ) {
....................    if( seconds > SERVO_DUTY_CYCLE_POS )
*
0468:  MOVLW  99
0469:  MOVWF  4B
046A:  MOVLW  BB
046B:  MOVWF  4A
046C:  MOVLW  16
046D:  MOVWF  49
046E:  MOVLW  76
046F:  MOVWF  48
0470:  MOVF   43,W
0471:  MOVWF  4F
0472:  MOVF   42,W
0473:  MOVWF  4E
0474:  MOVF   41,W
0475:  MOVWF  4D
0476:  MOVF   40,W
0477:  MOVWF  4C
0478:  CALL   3FE
0479:  BTFSS  03.0
047A:  GOTO   483
....................       seconds = SERVO_DUTY_CYCLE_POS;
047B:  MOVLW  99
047C:  MOVWF  43
047D:  MOVLW  BB
047E:  MOVWF  42
047F:  MOVLW  16
0480:  MOVWF  41
0481:  MOVLW  76
0482:  MOVWF  40
....................    if( seconds < 0 )
0483:  MOVF   43,W
0484:  MOVWF  4B
0485:  MOVF   42,W
0486:  MOVWF  4A
0487:  MOVF   41,W
0488:  MOVWF  49
0489:  MOVF   40,W
048A:  MOVWF  48
048B:  CLRF   4F
048C:  CLRF   4E
048D:  CLRF   4D
048E:  CLRF   4C
048F:  CALL   3FE
0490:  BTFSS  03.0
0491:  GOTO   496
....................       seconds = 0;
0492:  CLRF   43
0493:  CLRF   42
0494:  CLRF   41
0495:  CLRF   40
....................    unsigned int16 starting_point = (unsigned int16)(65535 - ( (SERVO_FOSC * seconds)/(4 * SERVO_T_PREESCALER) ));
....................    unsigned int16 complement = (unsigned int16)(65535 - ( (SERVO_FOSC * (SERVO_DUTY_CYCLE_POS - seconds))/(4 * SERVO_T_PREESCALER) ));
0496:  MOVLW  80
0497:  MOVWF  5A
0498:  MOVLW  96
0499:  MOVWF  59
049A:  MOVLW  18
049B:  MOVWF  58
049C:  MOVLW  97
049D:  MOVWF  57
049E:  MOVF   43,W
049F:  MOVWF  5E
04A0:  MOVF   42,W
04A1:  MOVWF  5D
04A2:  MOVF   41,W
04A3:  MOVWF  5C
04A4:  MOVF   40,W
04A5:  MOVWF  5B
04A6:  CALL   21B
04A7:  MOVF   7A,W
04A8:  MOVWF  4B
04A9:  MOVF   79,W
04AA:  MOVWF  4A
04AB:  MOVF   78,W
04AC:  MOVWF  49
04AD:  MOVF   77,W
04AE:  MOVWF  48
04AF:  MOVF   7A,W
04B0:  MOVWF  5A
04B1:  MOVF   79,W
04B2:  MOVWF  59
04B3:  MOVF   78,W
04B4:  MOVWF  58
04B5:  MOVF   77,W
04B6:  MOVWF  57
04B7:  CLRF   5E
04B8:  CLRF   5D
04B9:  CLRF   5C
04BA:  MOVLW  82
04BB:  MOVWF  5B
04BC:  CALL   290
04BD:  BSF    03.1
04BE:  CLRF   5A
04BF:  MOVLW  FF
04C0:  MOVWF  59
04C1:  MOVLW  7F
04C2:  MOVWF  58
04C3:  MOVLW  8E
04C4:  MOVWF  57
04C5:  MOVF   7A,W
04C6:  MOVWF  5E
04C7:  MOVF   79,W
04C8:  MOVWF  5D
04C9:  MOVF   78,W
04CA:  MOVWF  5C
04CB:  MOVF   77,W
04CC:  MOVWF  5B
04CD:  CALL   0DA
04CE:  MOVF   7A,W
04CF:  MOVWF  4B
04D0:  MOVF   79,W
04D1:  MOVWF  4A
04D2:  MOVF   78,W
04D3:  MOVWF  49
04D4:  MOVF   77,W
04D5:  MOVWF  48
04D6:  CALL   3DF
04D7:  MOVF   79,W
04D8:  MOVWF  45
04D9:  MOVF   78,W
04DA:  MOVWF  44
04DB:  BSF    03.1
04DC:  MOVLW  99
04DD:  MOVWF  5A
04DE:  MOVLW  BB
04DF:  MOVWF  59
04E0:  MOVLW  16
04E1:  MOVWF  58
04E2:  MOVLW  76
04E3:  MOVWF  57
04E4:  MOVF   43,W
04E5:  MOVWF  5E
04E6:  MOVF   42,W
04E7:  MOVWF  5D
04E8:  MOVF   41,W
04E9:  MOVWF  5C
04EA:  MOVF   40,W
04EB:  MOVWF  5B
04EC:  CALL   0DA
04ED:  MOVLW  80
04EE:  MOVWF  5A
04EF:  MOVLW  96
04F0:  MOVWF  59
04F1:  MOVLW  18
04F2:  MOVWF  58
04F3:  MOVLW  97
04F4:  MOVWF  57
04F5:  MOVF   7A,W
04F6:  MOVWF  5E
04F7:  MOVF   79,W
04F8:  MOVWF  5D
04F9:  MOVF   78,W
04FA:  MOVWF  5C
04FB:  MOVF   77,W
04FC:  MOVWF  5B
04FD:  CALL   21B
04FE:  MOVF   7A,W
04FF:  MOVWF  4B
0500:  MOVF   79,W
0501:  MOVWF  4A
0502:  MOVF   78,W
0503:  MOVWF  49
0504:  MOVF   77,W
0505:  MOVWF  48
0506:  MOVF   7A,W
0507:  MOVWF  5A
0508:  MOVF   79,W
0509:  MOVWF  59
050A:  MOVF   78,W
050B:  MOVWF  58
050C:  MOVF   77,W
050D:  MOVWF  57
050E:  CLRF   5E
050F:  CLRF   5D
0510:  CLRF   5C
0511:  MOVLW  82
0512:  MOVWF  5B
0513:  CALL   290
0514:  BSF    03.1
0515:  CLRF   5A
0516:  MOVLW  FF
0517:  MOVWF  59
0518:  MOVLW  7F
0519:  MOVWF  58
051A:  MOVLW  8E
051B:  MOVWF  57
051C:  MOVF   7A,W
051D:  MOVWF  5E
051E:  MOVF   79,W
051F:  MOVWF  5D
0520:  MOVF   78,W
0521:  MOVWF  5C
0522:  MOVF   77,W
0523:  MOVWF  5B
0524:  CALL   0DA
0525:  MOVF   7A,W
0526:  MOVWF  4B
0527:  MOVF   79,W
0528:  MOVWF  4A
0529:  MOVF   78,W
052A:  MOVWF  49
052B:  MOVF   77,W
052C:  MOVWF  48
052D:  CALL   3DF
052E:  MOVF   79,W
052F:  MOVWF  47
0530:  MOVF   78,W
0531:  MOVWF  46
....................    __servoSignal[1] = starting_point;
0532:  MOVF   45,W
0533:  MOVWF  2C
0534:  MOVF   44,W
0535:  MOVWF  2B
....................    __servoSignal[2] = complement;
0536:  MOVF   47,W
0537:  MOVWF  2E
0538:  MOVF   46,W
0539:  MOVWF  2D
.................... }
.................... 
.................... /**
....................  * @brief Sets the servo angle.
....................  * 
....................  * @param angle in degrees
....................  *
....................  * @description This function calculates the time in seconds that turn the
....................  *              servo to the input angle
....................  */
.................... void set_servo_angle ( int angle ) {
....................    if( angle > 180 )
*
043D:  MOVF   3B,W
043E:  SUBLW  B4
043F:  BTFSC  03.0
0440:  GOTO   443
....................       angle = 180;
0441:  MOVLW  B4
0442:  MOVWF  3B
....................    float __t = (SERVO_DUTY_CYCLE_POS/180.0) * (float)angle;
0443:  CLRF   41
0444:  MOVF   3B,W
0445:  MOVWF  40
0446:  CALL   0BD
0447:  MOVLW  24
0448:  MOVWF  5A
0449:  MOVLW  60
044A:  MOVWF  59
044B:  MOVLW  56
044C:  MOVWF  58
044D:  MOVLW  6E
044E:  MOVWF  57
044F:  MOVF   7A,W
0450:  MOVWF  5E
0451:  MOVF   79,W
0452:  MOVWF  5D
0453:  MOVF   78,W
0454:  MOVWF  5C
0455:  MOVF   77,W
0456:  MOVWF  5B
0457:  CALL   21B
0458:  MOVF   7A,W
0459:  MOVWF  3F
045A:  MOVF   79,W
045B:  MOVWF  3E
045C:  MOVF   78,W
045D:  MOVWF  3D
045E:  MOVF   77,W
045F:  MOVWF  3C
....................    set_servo_ms( __t );
0460:  MOVF   3F,W
0461:  MOVWF  43
0462:  MOVF   3E,W
0463:  MOVWF  42
0464:  MOVF   3D,W
0465:  MOVWF  41
0466:  MOVF   3C,W
0467:  MOVWF  40
*
053A:  BCF    0A.3
053B:  BCF    0A.4
053C:  GOTO   5C2 (RETURN)
.................... }
.................... 
.................... #endif // _SERVO_H_
.................... 
.................... 
.................... int16 valor_ADC;     // Variable para guardar la entrada analógica
.................... int posicion;        // Variable para ajustar la posición dle servo
.................... 
.................... // Escala el valor de una entrada de un rango a uno diferente
.................... double map( float value, float fromLow, float fromHigh, float toLow, float toHigh );
.................... 
.................... void main( void )
053D:  MOVF   03,W
053E:  ANDLW  1F
053F:  MOVWF  03
0540:  CLRF   28
0541:  MOVLW  FF
0542:  MOVWF  36
0543:  MOVWF  35
0544:  MOVWF  3A
0545:  BSF    03.5
0546:  BSF    1F.0
0547:  BSF    1F.1
0548:  BSF    1F.2
0549:  BCF    1F.3
054A:  MOVLW  07
054B:  MOVWF  1C
054C:  BCF    03.7
.................... {
....................     set_tris_c( 0xFB );                                    // C2 salida de pulsos
*
0562:  MOVLW  FB
0563:  BSF    03.5
0564:  MOVWF  07
0565:  BCF    03.5
0566:  MOVWF  3A
....................     setup_servo( PIN_C2 );                                 // Configura el PIN C2 como el servo
0567:  CLRF   3C
0568:  MOVLW  3A
0569:  MOVWF  3B
056A:  GOTO   090
....................     setup_adc_ports( AN0 );                                // configuracion deL canal ADC en A0
056B:  BSF    03.5
056C:  BCF    1F.0
056D:  BSF    1F.1
056E:  BSF    1F.2
056F:  BSF    1F.3
....................     setup_adc( ADC_CLOCK_DIV_8 );                          // Configura oscilador para la conversión
0570:  BCF    1F.6
0571:  BCF    03.5
0572:  BSF    1F.6
0573:  BCF    1F.7
0574:  BSF    03.5
0575:  BSF    1F.7
0576:  BCF    03.5
0577:  BSF    1F.0
....................     set_adc_channel( 0 );                                  // Conversion analogica por canal 0
0578:  MOVLW  00
0579:  MOVWF  78
057A:  MOVF   1F,W
057B:  ANDLW  C7
057C:  IORWF  78,W
057D:  MOVWF  1F
.................... 
....................     while ( 1 ) {
....................         valor_ADC = read_adc();                            // Lectura del potenciometro
057E:  BSF    1F.2
057F:  BTFSC  1F.2
0580:  GOTO   57F
0581:  MOVF   1E,W
0582:  MOVWF  79
0583:  BSF    03.5
0584:  MOVF   1E,W
0585:  MOVWF  78
0586:  MOVF   79,W
0587:  BCF    03.5
0588:  MOVWF  38
0589:  MOVF   78,W
058A:  MOVWF  37
....................         posicion = (int)map( valor_ADC, 0, 1024, 0, 180 ); // Obtiene la posición en grados
058B:  MOVF   38,W
058C:  MOVWF  41
058D:  MOVF   37,W
058E:  MOVWF  40
058F:  CALL   0BD
0590:  MOVF   7A,W
0591:  MOVWF  3E
0592:  MOVF   79,W
0593:  MOVWF  3D
0594:  MOVF   78,W
0595:  MOVWF  3C
0596:  MOVF   77,W
0597:  MOVWF  3B
0598:  MOVF   7A,W
0599:  MOVWF  42
059A:  MOVF   79,W
059B:  MOVWF  41
059C:  MOVF   78,W
059D:  MOVWF  40
059E:  MOVF   77,W
059F:  MOVWF  3F
05A0:  CLRF   46
05A1:  CLRF   45
05A2:  CLRF   44
05A3:  CLRF   43
05A4:  CLRF   4A
05A5:  CLRF   49
05A6:  CLRF   48
05A7:  MOVLW  89
05A8:  MOVWF  47
05A9:  CLRF   4E
05AA:  CLRF   4D
05AB:  CLRF   4C
05AC:  CLRF   4B
05AD:  CLRF   52
05AE:  CLRF   51
05AF:  MOVLW  34
05B0:  MOVWF  50
05B1:  MOVLW  86
05B2:  MOVWF  4F
05B3:  GOTO   35A
05B4:  MOVF   7A,W
05B5:  MOVWF  4B
05B6:  MOVF   79,W
05B7:  MOVWF  4A
05B8:  MOVF   78,W
05B9:  MOVWF  49
05BA:  MOVF   77,W
05BB:  MOVWF  48
05BC:  CALL   3DF
05BD:  MOVF   78,W
05BE:  MOVWF  39
....................         set_servo_angle( posicion );                       // Actualiza la posición del servo
05BF:  MOVF   39,W
05C0:  MOVWF  3B
05C1:  GOTO   43D
05C2:  GOTO   57E
....................     }
.................... }
.................... 
05C3:  SLEEP
.................... double map( float value, float fromLow, float fromHigh, float toLow, float toHigh )
.................... {
....................     return ( ( ( ( value - fromLow ) * ( toHigh - toLow ) ) / ( fromHigh - fromLow ) ) + toLow );
*
035A:  BSF    03.1
035B:  MOVF   42,W
035C:  MOVWF  5A
035D:  MOVF   41,W
035E:  MOVWF  59
035F:  MOVF   40,W
0360:  MOVWF  58
0361:  MOVF   3F,W
0362:  MOVWF  57
0363:  MOVF   46,W
0364:  MOVWF  5E
0365:  MOVF   45,W
0366:  MOVWF  5D
0367:  MOVF   44,W
0368:  MOVWF  5C
0369:  MOVF   43,W
036A:  MOVWF  5B
036B:  CALL   0DA
036C:  MOVF   7A,W
036D:  MOVWF  56
036E:  MOVF   79,W
036F:  MOVWF  55
0370:  MOVF   78,W
0371:  MOVWF  54
0372:  MOVF   77,W
0373:  MOVWF  53
0374:  BSF    03.1
0375:  MOVF   52,W
0376:  MOVWF  5A
0377:  MOVF   51,W
0378:  MOVWF  59
0379:  MOVF   50,W
037A:  MOVWF  58
037B:  MOVF   4F,W
037C:  MOVWF  57
037D:  MOVF   4E,W
037E:  MOVWF  5E
037F:  MOVF   4D,W
0380:  MOVWF  5D
0381:  MOVF   4C,W
0382:  MOVWF  5C
0383:  MOVF   4B,W
0384:  MOVWF  5B
0385:  CALL   0DA
0386:  MOVF   56,W
0387:  MOVWF  5A
0388:  MOVF   55,W
0389:  MOVWF  59
038A:  MOVF   54,W
038B:  MOVWF  58
038C:  MOVF   53,W
038D:  MOVWF  57
038E:  MOVF   7A,W
038F:  MOVWF  5E
0390:  MOVF   79,W
0391:  MOVWF  5D
0392:  MOVF   78,W
0393:  MOVWF  5C
0394:  MOVF   77,W
0395:  MOVWF  5B
0396:  CALL   21B
0397:  MOVF   7A,W
0398:  MOVWF  56
0399:  MOVF   79,W
039A:  MOVWF  55
039B:  MOVF   78,W
039C:  MOVWF  54
039D:  MOVF   77,W
039E:  MOVWF  53
039F:  BSF    03.1
03A0:  MOVF   4A,W
03A1:  MOVWF  5A
03A2:  MOVF   49,W
03A3:  MOVWF  59
03A4:  MOVF   48,W
03A5:  MOVWF  58
03A6:  MOVF   47,W
03A7:  MOVWF  57
03A8:  MOVF   46,W
03A9:  MOVWF  5E
03AA:  MOVF   45,W
03AB:  MOVWF  5D
03AC:  MOVF   44,W
03AD:  MOVWF  5C
03AE:  MOVF   43,W
03AF:  MOVWF  5B
03B0:  CALL   0DA
03B1:  MOVF   56,W
03B2:  MOVWF  5A
03B3:  MOVF   55,W
03B4:  MOVWF  59
03B5:  MOVF   54,W
03B6:  MOVWF  58
03B7:  MOVF   53,W
03B8:  MOVWF  57
03B9:  MOVF   7A,W
03BA:  MOVWF  5E
03BB:  MOVF   79,W
03BC:  MOVWF  5D
03BD:  MOVF   78,W
03BE:  MOVWF  5C
03BF:  MOVF   77,W
03C0:  MOVWF  5B
03C1:  CALL   290
03C2:  MOVF   7A,W
03C3:  MOVWF  56
03C4:  MOVF   79,W
03C5:  MOVWF  55
03C6:  MOVF   78,W
03C7:  MOVWF  54
03C8:  MOVF   77,W
03C9:  MOVWF  53
03CA:  BCF    03.1
03CB:  MOVF   7A,W
03CC:  MOVWF  5A
03CD:  MOVF   79,W
03CE:  MOVWF  59
03CF:  MOVF   78,W
03D0:  MOVWF  58
03D1:  MOVF   77,W
03D2:  MOVWF  57
03D3:  MOVF   4E,W
03D4:  MOVWF  5E
03D5:  MOVF   4D,W
03D6:  MOVWF  5D
03D7:  MOVF   4C,W
03D8:  MOVWF  5C
03D9:  MOVF   4B,W
03DA:  MOVWF  5B
03DB:  CALL   0DA
03DC:  BCF    0A.3
03DD:  BCF    0A.4
03DE:  GOTO   5B4 (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
