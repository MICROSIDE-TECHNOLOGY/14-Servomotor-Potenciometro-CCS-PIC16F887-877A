CCS PCM C Compiler, Version 5.076, 56587               24-feb.-22 15:19

               Filename:   E:\Martin Hdez\Desktop\CCS 16F\887\Práctica 14\Servomotor + Potenciómetro.lst

               ROM used:   186 words (2%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           18 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   04B
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... /* 
.................... AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V. 
.................... FECHA: JUNIO 2019 
.................... */ 
....................  
.................... /* 
.................... --------------------------------------------------------------------------- 
.................... Controlar la posición de un servomotor por medio de un potenciometro 
.................... utilizando los modulos PWM y ADC 
.................... --------------------------------------------------------------------------- 
.................... */ 
....................  
.................... #include <16F887.h>                            //Incluye el microcontrolador con el que se va a trabajar  
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #DEVICE ADC=10                                   //Configura el ADC 
.................... #use delay(clock=20Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador  
*
003C:  MOVLW  03
003D:  SUBWF  2C,F
003E:  BTFSS  03.0
003F:  GOTO   04A
0040:  MOVLW  2C
0041:  MOVWF  04
0042:  BCF    03.7
0043:  MOVF   00,W
0044:  BTFSC  03.2
0045:  GOTO   04A
0046:  GOTO   048
0047:  GOTO   048
0048:  DECFSZ 00,F
0049:  GOTO   047
004A:  RETURN
....................  
....................   
.................... int16 Duty;                                     //variable para ajustar el valor del PWM 
.................... int1 SUBE; 
....................  
.................... #int_TIMER0 
....................  
.................... void TIMER0_isr() 
....................  
.................... { 
....................  
.................... output_high(PIN_C2);                           
*
002F:  BCF    2A.2
0030:  MOVF   2A,W
0031:  BSF    03.5
0032:  MOVWF  07
0033:  BCF    03.5
0034:  BSF    07.2
.................... SUBE=1; 
0035:  BSF    29.0
.................... set_timer0(10000);                              
0036:  MOVLW  10
0037:  MOVWF  01
....................  
0038:  BCF    0B.2
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   01B
.................... } 
....................  
.................... void main() 
*
004B:  MOVF   03,W
004C:  ANDLW  1F
004D:  MOVWF  03
004E:  MOVLW  FF
004F:  MOVWF  2A
0050:  BSF    03.5
0051:  BSF    03.6
0052:  MOVF   09,W
0053:  ANDLW  C0
0054:  MOVWF  09
0055:  BCF    03.6
0056:  BCF    1F.4
0057:  BCF    1F.5
0058:  MOVLW  00
0059:  BSF    03.6
005A:  MOVWF  08
005B:  BCF    03.5
005C:  CLRF   07
005D:  CLRF   08
005E:  CLRF   09
005F:  BCF    03.7
....................  
.................... { 
....................  
....................   setup_oscillator(OSC_8MHZ);                    //Configura oscilador interno 
0060:  MOVLW  71
0061:  BSF    03.5
0062:  BCF    03.6
0063:  MOVWF  0F
0064:  CLRF   10
0065:  MOVF   0F,W
....................   set_tris_c (0xFB);                             // C2 salida de pulsos 
0066:  MOVLW  FB
0067:  MOVWF  07
0068:  BCF    03.5
0069:  MOVWF  2A
....................   setup_timer_0 (T0_INTERNAL|T0_DIV_4); 
006A:  BSF    03.5
006B:  MOVF   01,W
006C:  ANDLW  C0
006D:  IORLW  01
006E:  MOVWF  01
....................   enable_interrupts (int_TIMER0) ; 
006F:  BCF    03.5
0070:  BSF    0B.5
....................   enable_interrupts (GLOBAL) ; 
0071:  MOVLW  C0
0072:  IORWF  0B,F
....................   setup_adc_ports (sAN0);                        //configuracion deL canal ADC en A0 
0073:  BSF    03.5
0074:  BSF    03.6
0075:  MOVF   09,W
0076:  ANDLW  C0
0077:  MOVWF  09
0078:  BCF    03.6
0079:  BCF    1F.4
007A:  BCF    1F.5
007B:  MOVLW  01
007C:  BSF    03.6
007D:  MOVWF  08
....................   setup_adc (ADC_CLOCK_DIV_8);                  //Configura oscilador para la conversión 
007E:  BCF    03.5
007F:  BCF    03.6
0080:  BSF    1F.6
0081:  BCF    1F.7
0082:  BSF    03.5
0083:  BSF    1F.7
0084:  BCF    03.5
0085:  BSF    1F.0
....................   set_adc_channel (0);                          //conversion analogica por canal 0 
0086:  MOVLW  00
0087:  MOVWF  78
0088:  MOVF   1F,W
0089:  ANDLW  C3
008A:  IORWF  78,W
008B:  MOVWF  1F
....................  
....................     while(1) 
....................  
....................          { 
....................  
....................                 if (SUBE == 1) 
008C:  BTFSS  29.0
008D:  GOTO   0A2
....................  
....................                { 
....................                     delay_us (DUTY); 
008E:  MOVF   28,W
008F:  MOVWF  2B
0090:  INCF   2B,F
0091:  DECF   2B,F
0092:  BTFSC  03.2
0093:  GOTO   098
0094:  MOVLW  FF
0095:  MOVWF  2C
0096:  CALL   03C
0097:  GOTO   091
0098:  MOVF   27,W
0099:  MOVWF  2C
009A:  CALL   03C
....................                     output_low (PIN_C2) ; 
009B:  BCF    2A.2
009C:  MOVF   2A,W
009D:  BSF    03.5
009E:  MOVWF  07
009F:  BCF    03.5
00A0:  BCF    07.2
....................                     SUBE = 0; 
00A1:  BCF    29.0
....................                  } 
....................  
....................   
....................  
....................                   if (SUBE == 0) 
00A2:  BTFSC  29.0
00A3:  GOTO   0B6
....................  
....................                       { 
....................                           DUTY = read_adc ();             //lectura del potenciometro 
00A4:  BSF    1F.1
00A5:  BTFSC  1F.1
00A6:  GOTO   0A5
00A7:  BSF    03.5
00A8:  MOVF   1E,W
00A9:  BCF    03.5
00AA:  MOVWF  27
00AB:  MOVF   1E,W
00AC:  MOVWF  28
....................                           DUTY = DUTY * 2;                //ajuste de rango 
00AD:  BCF    03.0
00AE:  RLF    27,F
00AF:  RLF    28,F
....................                           DUTY += 500; 
00B0:  MOVLW  F4
00B1:  ADDWF  27,F
00B2:  MOVLW  01
00B3:  BTFSC  03.0
00B4:  MOVLW  02
00B5:  ADDWF  28,F
....................                        } 
....................  
....................                            while (SUBE == 0) ; 
00B6:  BTFSS  29.0
00B7:  GOTO   0B6
00B8:  GOTO   08C
....................                 } 
....................  
.................... } 
00B9:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
